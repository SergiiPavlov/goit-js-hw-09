{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// ----------------- Импорты библиотек -----------------\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// ----------------- Получение ссылок на DOM-элементы -----------------\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\n// ----------------- Переменные для состояния -----------------\nlet userSelectedDate = null; // Здесь будет храниться выбранная пользователем дата\nlet timerId = null; // ID интервала для таймера\n\n// ----------------- Изначальное состояние интерфейса -----------------\nstartButton.disabled = true; // Кнопка \"Start\" неактивна при загрузке\n\n// ----------------- Настройки для flatpickr -----------------\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    // Эта функция вызывается при закрытии календаря\n    const selectedDate = selectedDates[0];\n\n    // Проверка, выбрана ли дата в будущем\n    if (selectedDate < new Date()) {\n      // Если дата в прошлом - показываем ошибку и блокируем кнопку\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startButton.disabled = true;\n    } else {\n      // Если дата в будущем - сохраняем ее и разблокируем кнопку\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\n// ----------------- Инициализация flatpickr -----------------\nflatpickr(datetimePicker, options);\n\n// ----------------- Обработчик клика по кнопке \"Start\" -----------------\nstartButton.addEventListener('click', () => {\n  // Блокируем кнопку и поле ввода даты после старта\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  // Запускаем таймер, который будет обновляться каждую секунду\n  timerId = setInterval(() => {\n    // Вычисляем разницу между текущим временем и выбранной датой\n    const now = new Date();\n    const timeDifference = userSelectedDate - now;\n\n    // Если время вышло\n    if (timeDifference <= 0) {\n      clearInterval(timerId); // Останавливаем таймер\n      datetimePicker.disabled = false; // Разблокируем поле ввода\n      updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 }); // Сбрасываем таймер на 00:00:00:00\n      return;\n    }\n\n    // Конвертируем миллисекунды в дни, часы, минуты, секунды\n    const time = convertMs(timeDifference);\n    // Обновляем интерфейс таймера\n    updateTimerDisplay(time);\n  }, 1000);\n});\n\n// ----------------- Функция для обновления отображения таймера -----------------\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n\n// ----------------- Функция для добавления нуля в начале -----------------\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n// ----------------- Функция для конвертации миллисекунд (из задания) -----------------\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}"],"names":["datetimePicker","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","userSelectedDate","timerId","options","selectedDates","selectedDate","iziToast","flatpickr","timeDifference","updateTimerDisplay","time","convertMs","days","hours","minutes","seconds","addLeadingZero","value","ms"],"mappings":"2GAOA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAG3D,IAAIC,EAAmB,KACnBC,EAAU,KAGdN,EAAY,SAAW,GAGvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,MAAMC,EAAeD,EAAc,CAAC,EAGhCC,EAAe,IAAI,MAErBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDV,EAAY,SAAW,KAGvBK,EAAmBI,EACnBT,EAAY,SAAW,GAE1B,CACH,EAGAW,EAAUZ,EAAgBQ,CAAO,EAGjCP,EAAY,iBAAiB,QAAS,IAAM,CAE1CA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAG1BO,EAAU,YAAY,IAAM,CAG1B,MAAMM,EAAiBP,EADX,IAAI,KAIhB,GAAIO,GAAkB,EAAG,CACvB,cAAcN,CAAO,EACrBP,EAAe,SAAW,GAC1Bc,EAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAChE,MACD,CAGD,MAAMC,EAAOC,EAAUH,CAAc,EAErCC,EAAmBC,CAAI,CACxB,EAAE,GAAI,CACT,CAAC,EAGD,SAASD,EAAmB,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7DlB,EAAS,YAAcmB,EAAeJ,CAAI,EAC1Cd,EAAU,YAAckB,EAAeH,CAAK,EAC5Cd,EAAY,YAAciB,EAAeF,CAAO,EAChDd,EAAY,YAAcgB,EAAeD,CAAO,CAClD,CAGA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAGA,SAASN,EAAUO,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}